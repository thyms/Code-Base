Enums
-----
public enum RtcResponseType {
    
    UNKNOWN(-1, "Unknown"), // Temporary
    SUCCESS(0, "Successful Charging"), //
    INSUFFICIENT_CREDIT(1, "Insufficient_Credit"), //
    SUBSCRIBER_NOT_FOUND(2, "Subscriber Not Found"), //Permanent
    SUBSCRIBER_NOT_VALID(3, "Subscriber Not Accepted"), //Permanent
    SUBSCRIBER_PASSSIVE(4, "Subscriber Passive"), //Temporary
    INVALID_OPERATION(5, "Invalid Operation. Must be C or R"), //Permanent
    SYSTEM_ERROR(99, "System Error");//Temporary
    
    private int    returnVal;
    private String description;
    
    private RtcResponseType(int returnVal, String description) {
        this.returnVal = returnVal;
        this.description = description;
    }
    
    public int getReturnVal() {
        return returnVal;
    }
    
    public String getDescription() {
        return description;
    }
    
    public static RtcResponseType getEnum(int returnVal) {
        for (RtcResponseType temp : RtcResponseType.values()) {
            if (temp.getReturnVal() == returnVal) {
                return temp;
            }
        }
        return UNKNOWN;
    }
}

**********************************************************
Enum.Utils
    public static <T extends Enum<T>> T getEnum(Class<T> enumClass, String name) {
        if (name != null) {
            return Enum.valueOf(enumClass, name);
        }
        return null;
    }
    
    public static <T extends Enum<T>> T getEnum(Class<T> enumClass, Enum<?> enumName) {
        if (enumName != null) {
            return Enum.valueOf(enumClass, enumName.name());
        }
        return null;
    }
    

**********************************************************    
 Groovy SQL
 sql.execute '''
     create table PROJECT (
         id integer not null,
         name varchar(50),
         url varchar(100),
     )
 '''
 
 
subscribers.add(MSISDN: "905431234567", RWM_COUNTRY_ID: 213, COUNTRY_NAME: "Algeria", ATTACH_TIME: 1304208000000, SENDDATE: 1309330796859, FLAG: 0, FLAG_VRP: 0, VODAFONE_OPCO: 1)
********************************************************** 
Groovy Properties file
def props = new Properties()
new File("message.properties").withInputStream { 
  stream -> props.load(stream) 
}
// accessing the property from Properties object using Groovy's map notation
println "capacity.created=" + props["capacity.created"]

def config = new ConfigSlurper().parse(props)
// accessing the property from ConfigSlurper object using GPath expression
println "capacity.created=" + config.capacity.created

If you only use the property file from within Groovy code you should use the Groovy notation variant directly.

def config = new ConfigSlurper().parse(new File("message.groovy").toURL())

    