Running a groovy class
----------------------
cmd-> groovy -cp "junit-4.8.1.jar;spock-core-0.5-groovy-1.8.jar" HelloSpock

Running groovy code on cmd/prompt
---------------------------------
cmd->groovy -e "println 'Hi'"

Selecting/matching words(regular expression)
--------------------------------------------
// selecting words
finder = '23rd Psalm' =~ /\b([A-Za-z]+)\b/   // usually best
println finder[0][0]

Matching Multiple Lines
-----------------------
fakedFile = '''
<html>
<head><title>Chapter 1 Title</title></head>
<body>
<h1>Chapter 1: Some Heading</h1>
A paragraph.
</body>
</html>
'''

stripExpectations = '''
Chapter 1 Title

Chapter 1: Some Heading
A paragraph.
'''.trim()

stripped = fakedFile.replaceAll(/(?m)<.*?>/,'').trim()
assert stripExpectations == stripped

Printing Date
-------------
import java.text.DateFormat
import java.text.SimpleDateFormat

cal = Calendar.instance
cal.set(2007, 0, 1)
df = new SimpleDateFormat('E M d hh:mm:ss z yyyy')
println 'Customized format gives: ' + df.format(cal.time)
// => Mon 1 1 09:02:29 EST 2007 (differs depending on your timezone)
df = DateFormat.getDateInstance(DateFormat.FULL, Locale.FRANCE)
println 'Customized format gives: ' + df.format(cal.time)
// => lundi 1 janvier 2007

Parsing and formatting Date
---------------------------
import java.text.SimpleDateFormat

input = "1998-06-03"
df1 = new SimpleDateFormat("yyyy-MM-dd")
date = df1.parse(input)
df2 = new SimpleDateFormat("MMM/dd/yyyy")
println 'Date was ' + df2.format(date)


Date printing
-------------
cal = Calendar.instance
cal.set(1981, 5, 16)
yearDay = cal.get(Calendar.DAY_OF_YEAR);
year = cal.get(Calendar.YEAR);
yearWeek = cal.get(Calendar.WEEK_OF_YEAR);
df1 = new SimpleDateFormat("dd/MMM/yy")
df2 = new SimpleDateFormat("EEEE")
print(df1.format(cal.time) + ' was a ' + df2.format(cal.time))
println " and was day number $yearDay and week number $yearWeek of $year"
// => 16/Jun/81 was a Tuesday and was day number 167 and week number 25 of 1981

Adjusting time of Calender
--------------------------
import java.text.SimpleDateFormat

df = new SimpleDateFormat()
printCal = {cal -> df.format(cal.time)}
cal = Calendar.instance
cal.timeZone = TimeZone.getTimeZone("UTC")
cal.set(1973, 0, 18, 3, 45, 50)
cal.add(Calendar.DATE, 55)
cal.add(Calendar.HOUR_OF_DAY, 2)
cal.add(Calendar.MINUTE, 17)
cal.add(Calendar.SECOND, 5)
assert printCal(cal) == '14/03/73 16:02'

Adjusting time of Calender
--------------------------
import java.text.SimpleDateFormat

time = System.currentTimeMillis()
long difference = 100
long after = time + difference
long before = time - difference

// any field of a calendar is incrementable via add() and roll() methods
cal = Calendar.getInstance(TimeZone.getTimeZone("America/Los_Angeles"), Locale.ENGLISH)
df = new SimpleDateFormat()
printCal = {cal -> df.format(cal.time)}
cal.set(2000, 0, 1, 00, 01, 0)
assert printCal(cal) == '1/01/00 00:01'
// roll minute back by 2 but don't adjust other fields
cal.roll(Calendar.MINUTE, -2)
assert printCal(cal) == '1/01/00 00:59'
// adjust hour back 1 and adjust other fields if needed
cal.add(Calendar.HOUR, -1)
assert printCal(cal) == '31/12/99 23:59'

Setting month of Calendar
-------------------------
cal = Calendar.instance
// set date fields one at a time
cal.set(Calendar.MONTH, Calendar.DECEMBER)
// or several together
//calendar.set(year, month - 1, day, hour, minute, second)

Setting time zone of Calendar
----------------------------
cal = Calendar.instance
// set time zone using long or short timezone values
cal.timeZone = TimeZone.getTimeZone("America/Los_Angeles")
cal.timeZone = TimeZone.getTimeZone("UTC")

Printing Correct Plural
-----------------------
def timeMessage(hour) { 'It took ' + hour + ' hour' + (hour == 1 ? '' : 's') }
assert 'It took 1 hour' == timeMessage(1)
assert 'It took 2 hours' == timeMessage(2)

// you can also use Java's ChoiceFormat
// overkill for this example but extensible and compatible with MessageFormat
limits = [1, ChoiceFormat.nextDouble(1)] as double[]
names = ['century', 'centuries'] as String[]
choice = new ChoiceFormat(limits, names)
numCenturies = 1
expected = 'It took 1 century'
assert expected == "It took $numCenturies " + choice.format(numCenturies)
// an alternate constructor syntax
choice = new ChoiceFormat('0#are no files|1#is one file|2#are multiple files')
assert choice.format(3) == 'are multiple files'

Getting Locale "tr"
-------------------
nf = NumberFormat.getInstance(new Locale('tr'))
assert nf.format(-1740525205) == '-1.740.525.205'

Better random number creation by providing seed
-----------------------------------------------
long seed = System.currentTimeMillis() + Runtime.runtime.freeMemory()
random1 = new Random(seed)
random2 = new Random(seed)
assert random1.nextInt() == random2.nextInt()	// using same seed yields same result

Formatting strings with sprintf method
--------------------------------------
str = sprintf( '%2$s %3$s %1$s', ['cool!', 'Groovy', 'is'])
// Uses Java Formatter: http://download.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html
println str

Executing an .exe
-----------------
input = 'path_to_cygwin/bin/ps.exe'.execute().text

Getting input from console by eachLine
----------------------------------------
new BufferedReader(new InputStreamReader(System.in)).eachLine{
	println(">" + it.trim() + "<");
}

Getting input from console by readLine
--------------------------------------
print 'Enter file permission in octal: '
input = new BufferedReader(new InputStreamReader(System.in))
num = input.readLine().trim()

"each" closure with index "eachWithIndex"
-----------------------------------------
def numbers = [ 5, 7, 9, 12 ]
numbers.eachWithIndex{ num, idx -> println "$idx: $num" }

Sending mail with AntBuilder
----------------------------
ant = new AntBuilder()
ant.mail(from:'manager@grumpybank.com', tolist:'innocent@poorhouse.com',
    encoding:'plain', mailhost:'mail.someserver.com',
    subject:'Friendly Letter', message:'this is a test message')

H2 Database quick start in Groovy with Grab
-------------------------------------------
@GrabConfig(systemClassLoader=true)
@Grab(group='com.h2database', module='h2', version='1.3.154')
import groovy.sql.Sql

sql = Sql.newInstance("jdbc:h2:mem:test", "sa","", "org.h2.Driver")

sql.execute("create table tableName (id number, firstName varchar2(200))")

id = 1
firstName = "Deniz"
sql.execute("insert into tableName values(${id}, ${firstName})")

sql.eachRow("select * from tableName", { println it.id + " -- ${it.firstName} --"} )


GMaven
------
$mvn groovy:shell		// Opens a groovy shell, no overhead, no hustle, just do it.
$mvn groovy:console		// Opens a groovy console, no overhead, no hustle, just do it.
$mvn groovy:providers	// Displays gmaven providers.

--> Executing groovy code
-> Run "execute" goal of "groovy" plugin
$mvn groovy:execute
-> Related pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>dk.org</groupId>
	<artifactId>Kata-Base</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Kata Base</name>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<encoding>utf-8</encoding>
					<target>1.6</target>
					<source>1.6</source>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.groovy.maven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<configuration>
					<source>
						println project.basedir
					</source>
				</configuration>
			</plugin>		
		</plugins>
	</build>
</project>

** Followings are binded to "generate-resources" phase, "mvn compile" will be enough to make it run.
-> Execute an Inline Groovy Script
<plugin>
    <groupId>org.codehaus.groovy.maven</groupId>
    <artifactId>gmaven-plugin</artifactId>
    <executions>
        <execution>
            <phase>generate-resources</phase>
            <goals>
                <goal>execute</goal>
            </goals>
            <configuration>
                <source>
                    if (project.packaging != 'pom') {
                        log.info('Copying some stuff...')

                        def dir = new File(project.basedir, 'target/classes/META-INF')

                        ant.mkdir(dir: dir)
                        ant.copy(todir: dir) {
                            fileset(dir: project.basedir) {
                                include(name: 'LICENSE.txt')
                                include(name: 'NOTICE.txt')
                            }
                        }
                    }
                </source>
            </configuration>
        </execution>
    </executions>
</plugin>

-> Execute a Local Groovy Script
<plugin>
    <groupId>org.codehaus.groovy.maven</groupId>
    <artifactId>gmaven-plugin</artifactId>
    <executions>
        <execution>
            <phase>generate-resources</phase>
            <goals>
                <goal>execute</goal>
            </goals>
            <configuration>
                <source>${pom.basedir}/src/main/script/myscript.groovy</source>
            </configuration>
        </execution>
    </executions>
</plugin>

-> Execute a Remote Groovy Script
<plugin>
    <groupId>org.codehaus.groovy.maven</groupId>
    <artifactId>gmaven-plugin</artifactId>
    <executions>
        <execution>
            <phase>generate-resources</phase>
            <goals>
                <goal>execute</goal>
            </goals>
            <configuration>
                <source>http://mydomain.com/myscript.groovy</source>
            </configuration>
        </execution>
    </executions>
</plugin>

-> Using Java Classes
<plugin>
    <groupId>org.codehaus.groovy.maven</groupId>
    <artifactId>gmaven-plugin</artifactId>
    <executions>
        <execution>
            <phase>generate-resources</phase>
            <goals>
                <goal>execute</goal>
            </goals>
            <configuration>
                <classpath>
                    <element>
                        <groupId>commons-lang</groupId>
                        <artifactId>commons-lang</artifactId>
                    </element>
                </classpath>
                <source>
                    import org.apache.commons.lang.SystemUtils
                    if (SystemUtils.IS_OS_WINDOWS) {
                        println('Go buy a Mac!')
                    }
                </source>
            </configuration>
        </execution>
    </executions>
</plugin>

-> Using Groovy Classes
<plugin>
    <groupId>org.codehaus.groovy.maven</groupId>
    <artifactId>gmaven-plugin</artifactId>
    <executions>
        <execution>
            <phase>generate-resources</phase>
            <goals>
                <goal>execute</goal>
            </goals>
            <configuration>
                <scriptpath>
                    <element>${pom.basedir}/src/main/script</element>
                </scriptpath>
                <source>
                    import Helper
                    Helper.callSomeStatic()
                </source>
            </configuration>
        </execution>
    </executions>
</plugin>

-> Custom Properties
<plugin>
    <groupId>org.codehaus.groovy.maven</groupId>
    <artifactId>gmaven-plugin</artifactId>
    <executions>
        <execution>
            <phase>generate-resources</phase>
            <goals>
                <goal>execute</goal>
            </goals>
            <configuration>
                <properties>
                    <hello>world</hello>
                </properties>
                <source>
                    println project.properties['hello']
                    
                    // or if you prefer, these work just the same:
                    // println project.properties.hello
                    // println project.properties.get('hello')
                    // println project.properties.getProperty('hello')
                </source>
            </configuration>
        </execution>
    </executions>
</plugin>

-> Custom Properties with defaults
<plugin>
    <groupId>org.codehaus.groovy.maven</groupId>
    <artifactId>gmaven-plugin</artifactId>
    <executions>
        <execution>
            <phase>generate-resources</phase>
            <goals>
                <goal>execute</goal>
            </goals>
            <configuration>
                <defaults>
                    <hello>world</hello>
                </defaults>
                <source>
                    println project.properties['hello']
                </source>
            </configuration>
        </execution>
    </executions>
</plugin>
- run "mvn -Dhello=jason" to change the value of hello.

****************************************************************************
****************************************************************************